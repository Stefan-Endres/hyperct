from hyperct import *


def func(x):
    import numpy
    return numpy.sum(x ** 2) + 2.0 * x[0]


def g_cons(x):  # (Requires n > 2)
    import numpy
    # return x[0] - 0.5 * x[2] + 0.5
    return x[0]  # + x[2] #+ 0.5


# Test
class TestCube(object):
    def test_1_1_2D_cube_init(self):  # TODO: REMOVE FUNC AFTER SPLIT
        """Test that the initial 2D cube has the correct coords"""
        HC = Complex(2, func)
        HC.n_cube()
        check = [(0, 0), (1, 1), (1, 0), (0, 1), (0.5, 0.5)]
        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

    def test_1_2_2D_cube_splits(self):
        """Test that the 2D cube subtriangulations has the correct coords"""
        HC = Complex(2, func)
        HC.n_cube()
        HC.split_generation()
        HC.split_generation()
        check = [(0, 0), (1, 1), (1, 0), (0, 1), (0.5, 0.5), (0.0, 0.5),
                 (0.5, 0.0),
                 (0.25, 0.25), (1.0, 0.5), (0.5, 1.0), (0.75, 0.75),
                 (0.75, 0.25),
                 (0.25, 0.75), (0.5, 0.25), (0.25, 0.5), (0.375, 0.375),
                 (0.0, 0.25),
                 (0.25, 0.0), (0.125, 0.125), (0.125, 0.375), (0.375, 0.125),
                 (0.5, 0.75), (0.75, 0.5), (0.625, 0.625), (1.0, 0.75),
                 (0.75, 1.0),
                 (0.875, 0.875), (0.875, 0.625), (0.625, 0.875), (0.625, 0.375),
                 (1.0, 0.25), (0.75, 0.0), (0.875, 0.125), (0.875, 0.375),
                 (0.625, 0.125), (0.375, 0.625), (0.0, 0.75), (0.25, 1.0),
                 (0.125, 0.875), (0.125, 0.625), (0.375, 0.875)]

        for i, v in enumerate(HC.V.cache):
            numpy.testing.assert_equal(check[i], v)

    def test_2_1_3D_cube_init(self):
        """Test that the initial 3D cube has the correct coords"""
        HC = Complex(3, func)
        HC.n_cube()
        HC.split_generation()
        HC.split_generation()
        check = [(0, 0, 0), (1, 1, 1), (1, 0, 0), (1, 1, 0), (1, 0, 1),
                 (0, 1, 0), (0, 1, 1), (0, 0, 1), (0.5, 0.5, 0.5)]
        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

    def test_2_2_3D_cube_splits(self):
        """Test that the 3D cube subtriangulations has the correct coords"""
        HC = Complex(2, func)
        HC.n_cube()
        HC.split_generation()
        HC.split_generation()
        check = [(0, 0, 0), (1, 1, 1), (1, 0, 0), (1, 1, 0), (1, 0, 1),
                 (0, 1, 0),
                 (0, 1, 1), (0, 0, 1), (0.5, 0.5, 0.5), (0.0, 0.5, 0.5),
                 (0.0, 0.0, 0.5), (0.0, 0.5, 0.0), (0.5, 0.0, 0.5),
                 (0.5, 0.0, 0.0),
                 (0.5, 0.5, 0.0), (0.25, 0.25, 0.25), (1.0, 0.5, 0.5),
                 (1.0, 1.0, 0.5),
                 (1.0, 0.5, 1.0), (0.5, 1.0, 0.5), (0.5, 1.0, 1.0),
                 (0.5, 0.5, 1.0),
                 (0.75, 0.75, 0.75), (1.0, 0.0, 0.5), (1.0, 0.5, 0.0),
                 (0.75, 0.25, 0.25), (0.5, 1.0, 0.0), (0.75, 0.75, 0.25),
                 (0.5, 0.0, 1.0), (0.75, 0.25, 0.75), (0.0, 1.0, 0.5),
                 (0.25, 0.75, 0.25), (0.0, 0.5, 1.0), (0.25, 0.75, 0.75),
                 (0.25, 0.25, 0.75), (0.5, 0.25, 0.25), (0.5, 0.5, 0.25),
                 (0.5, 0.25, 0.5), (0.25, 0.5, 0.25), (0.25, 0.5, 0.5),
                 (0.25, 0.25, 0.5), (0.375, 0.375, 0.375), (0.0, 0.25, 0.25),
                 (0.0, 0.0, 0.25), (0.0, 0.25, 0.0), (0.25, 0.0, 0.25),
                 (0.25, 0.0, 0.0), (0.25, 0.25, 0.0), (0.125, 0.125, 0.125),
                 (0.0, 0.5, 0.25), (0.0, 0.25, 0.5), (0.125, 0.375, 0.375),
                 (0.25, 0.0, 0.5), (0.125, 0.125, 0.375), (0.25, 0.5, 0.0),
                 (0.125, 0.375, 0.125), (0.5, 0.0, 0.25), (0.375, 0.125, 0.375),
                 (0.5, 0.25, 0.0), (0.375, 0.125, 0.125), (0.375, 0.375, 0.125),
                 (0.5, 0.75, 0.75), (0.5, 0.5, 0.75), (0.5, 0.75, 0.5),
                 (0.75, 0.5, 0.75), (0.75, 0.5, 0.5), (0.75, 0.75, 0.5),
                 (0.625, 0.625, 0.625), (1.0, 0.75, 0.75), (1.0, 1.0, 0.75),
                 (1.0, 0.75, 1.0), (0.75, 1.0, 0.75), (0.75, 1.0, 1.0),
                 (0.75, 0.75, 1.0), (0.875, 0.875, 0.875), (1.0, 0.5, 0.75),
                 (1.0, 0.75, 0.5), (0.875, 0.625, 0.625), (0.75, 1.0, 0.5),
                 (0.875, 0.875, 0.625), (0.75, 0.5, 1.0), (0.875, 0.625, 0.875),
                 (0.5, 1.0, 0.75), (0.625, 0.875, 0.625), (0.5, 0.75, 1.0),
                 (0.625, 0.875, 0.875), (0.625, 0.625, 0.875),
                 (0.75, 0.5, 0.25),
                 (0.75, 0.25, 0.5), (0.625, 0.375, 0.375), (1.0, 0.25, 0.25),
                 (1.0, 0.0, 0.25), (1.0, 0.25, 0.0), (0.75, 0.0, 0.25),
                 (0.75, 0.0, 0.0), (0.75, 0.25, 0.0), (0.875, 0.125, 0.125),
                 (1.0, 0.5, 0.25), (1.0, 0.25, 0.5), (0.875, 0.375, 0.375),
                 (0.75, 0.0, 0.5), (0.875, 0.125, 0.375), (0.75, 0.5, 0.0),
                 (0.875, 0.375, 0.125), (0.625, 0.125, 0.375),
                 (0.625, 0.125, 0.125),
                 (0.625, 0.375, 0.125), (0.5, 0.75, 0.25),
                 (0.625, 0.625, 0.375),
                 (1.0, 0.75, 0.25), (1.0, 1.0, 0.25), (1.0, 0.75, 0.0),
                 (0.75, 1.0, 0.25), (0.75, 1.0, 0.0), (0.75, 0.75, 0.0),
                 (0.875, 0.875, 0.125), (0.875, 0.625, 0.375),
                 (0.875, 0.875, 0.375),
                 (0.875, 0.625, 0.125), (0.5, 1.0, 0.25), (0.625, 0.875, 0.375),
                 (0.5, 0.75, 0.0), (0.625, 0.875, 0.125), (0.625, 0.625, 0.125),
                 (0.5, 0.25, 0.75), (0.625, 0.375, 0.625), (1.0, 0.25, 0.75),
                 (1.0, 0.0, 0.75), (1.0, 0.25, 1.0), (0.75, 0.0, 0.75),
                 (0.75, 0.0, 1.0), (0.75, 0.25, 1.0), (0.875, 0.125, 0.875),
                 (0.875, 0.375, 0.625), (0.875, 0.125, 0.625),
                 (0.875, 0.375, 0.875),
                 (0.5, 0.0, 0.75), (0.625, 0.125, 0.625), (0.5, 0.25, 1.0),
                 (0.625, 0.125, 0.875), (0.625, 0.375, 0.875),
                 (0.25, 0.75, 0.5),
                 (0.375, 0.625, 0.375), (0.0, 0.75, 0.25), (0.0, 1.0, 0.25),
                 (0.0, 0.75, 0.0), (0.25, 1.0, 0.25), (0.25, 1.0, 0.0),
                 (0.25, 0.75, 0.0), (0.125, 0.875, 0.125), (0.0, 0.75, 0.5),
                 (0.125, 0.625, 0.375), (0.25, 1.0, 0.5), (0.125, 0.875, 0.375),
                 (0.125, 0.625, 0.125), (0.375, 0.875, 0.375),
                 (0.375, 0.875, 0.125),
                 (0.375, 0.625, 0.125), (0.25, 0.5, 0.75),
                 (0.375, 0.625, 0.625),
                 (0.0, 0.75, 0.75), (0.0, 1.0, 0.75), (0.0, 0.75, 1.0),
                 (0.25, 1.0, 0.75), (0.25, 1.0, 1.0), (0.25, 0.75, 1.0),
                 (0.125, 0.875, 0.875), (0.0, 0.5, 0.75), (0.125, 0.625, 0.625),
                 (0.125, 0.875, 0.625), (0.25, 0.5, 1.0), (0.125, 0.625, 0.875),
                 (0.375, 0.875, 0.625), (0.375, 0.875, 0.875),
                 (0.375, 0.625, 0.875),
                 (0.375, 0.375, 0.625), (0.0, 0.25, 0.75), (0.0, 0.0, 0.75),
                 (0.0, 0.25, 1.0), (0.25, 0.0, 0.75), (0.25, 0.0, 1.0),
                 (0.25, 0.25, 1.0), (0.125, 0.125, 0.875),
                 (0.125, 0.375, 0.625),
                 (0.125, 0.125, 0.625), (0.125, 0.375, 0.875),
                 (0.375, 0.125, 0.625),
                 (0.375, 0.125, 0.875), (0.375, 0.375, 0.875)]

    def test_3_1_4D_cube_init(self):
        """Test that the initial 4D cube has the correct coords"""
        HC = Complex(4, func)
        HC.n_cube()
        check = [(0, 0, 0, 0), (1, 1, 1, 1), (1, 0, 0, 0), (1, 1, 0, 0),
                 (1, 1, 1, 0), (1, 1, 0, 1), (1, 0, 1, 0), (1, 0, 1, 1),
                 (1, 0, 0, 1), (0, 1, 0, 0), (0, 1, 1, 0), (0, 1, 1, 1),
                 (0, 1, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1), (0, 0, 0, 1),
                 (0.5, 0.5, 0.5, 0.5)]

        for i, v in enumerate(HC.C0()):
            pass
            numpy.testing.assert_equal(check[i], v.x)

    def test_3_2_4D_cube_splits(self):
        """Test that the 4D cube subtriangulations has the correct coords"""
        HC = Complex(4, func)
        HC.n_cube()
        HC.split_generation()
        check = [(0, 0, 0, 0), (1, 1, 1, 1), (1, 0, 0, 0), (1, 1, 0, 0),
                 (1, 1, 1, 0),
                 (1, 1, 0, 1), (1, 0, 1, 0), (1, 0, 1, 1), (1, 0, 0, 1),
                 (0, 1, 0, 0),
                 (0, 1, 1, 0), (0, 1, 1, 1), (0, 1, 0, 1), (0, 0, 1, 0),
                 (0, 0, 1, 1),
                 (0, 0, 0, 1), (0.5, 0.5, 0.5, 0.5), (0.0, 0.5, 0.5, 0.5),
                 (0.0, 0.0, 0.5, 0.5), (0.0, 0.0, 0.0, 0.5),
                 (0.0, 0.0, 0.5, 0.0),
                 (0.0, 0.5, 0.0, 0.5), (0.0, 0.5, 0.0, 0.0),
                 (0.0, 0.5, 0.5, 0.0),
                 (0.5, 0.0, 0.5, 0.5), (0.5, 0.0, 0.0, 0.5),
                 (0.5, 0.0, 0.0, 0.0),
                 (0.5, 0.0, 0.5, 0.0), (0.5, 0.5, 0.0, 0.5),
                 (0.5, 0.5, 0.0, 0.0),
                 (0.5, 0.5, 0.5, 0.0), (0.25, 0.25, 0.25, 0.25),
                 (1.0, 0.5, 0.5, 0.5),
                 (1.0, 1.0, 0.5, 0.5), (1.0, 1.0, 1.0, 0.5),
                 (1.0, 1.0, 0.5, 1.0),
                 (1.0, 0.5, 1.0, 0.5), (1.0, 0.5, 1.0, 1.0),
                 (1.0, 0.5, 0.5, 1.0),
                 (0.5, 1.0, 0.5, 0.5), (0.5, 1.0, 1.0, 0.5),
                 (0.5, 1.0, 1.0, 1.0),
                 (0.5, 1.0, 0.5, 1.0), (0.5, 0.5, 1.0, 0.5),
                 (0.5, 0.5, 1.0, 1.0),
                 (0.5, 0.5, 0.5, 1.0), (0.75, 0.75, 0.75, 0.75),
                 (1.0, 0.0, 0.5, 0.5),
                 (1.0, 0.0, 0.0, 0.5), (1.0, 0.0, 0.5, 0.0),
                 (1.0, 0.5, 0.0, 0.5),
                 (1.0, 0.5, 0.0, 0.0), (1.0, 0.5, 0.5, 0.0),
                 (0.75, 0.25, 0.25, 0.25),
                 (1.0, 1.0, 0.0, 0.5), (1.0, 1.0, 0.5, 0.0),
                 (0.5, 1.0, 0.0, 0.5),
                 (0.5, 1.0, 0.0, 0.0), (0.5, 1.0, 0.5, 0.0),
                 (0.75, 0.75, 0.25, 0.25),
                 (1.0, 0.5, 1.0, 0.0), (0.5, 1.0, 1.0, 0.0),
                 (0.5, 0.5, 1.0, 0.0),
                 (0.75, 0.75, 0.75, 0.25), (1.0, 0.5, 0.0, 1.0),
                 (0.5, 1.0, 0.0, 1.0),
                 (0.5, 0.5, 0.0, 1.0), (0.75, 0.75, 0.25, 0.75),
                 (1.0, 0.0, 1.0, 0.5),
                 (0.5, 0.0, 1.0, 0.5), (0.5, 0.0, 1.0, 0.0),
                 (0.75, 0.25, 0.75, 0.25),
                 (1.0, 0.0, 0.5, 1.0), (0.5, 0.0, 1.0, 1.0),
                 (0.5, 0.0, 0.5, 1.0),
                 (0.75, 0.25, 0.75, 0.75), (0.5, 0.0, 0.0, 1.0),
                 (0.75, 0.25, 0.25, 0.75), (0.0, 1.0, 0.5, 0.5),
                 (0.0, 1.0, 0.0, 0.5),
                 (0.0, 1.0, 0.5, 0.0), (0.25, 0.75, 0.25, 0.25),
                 (0.0, 1.0, 1.0, 0.5),
                 (0.0, 0.5, 1.0, 0.5), (0.0, 0.5, 1.0, 0.0),
                 (0.25, 0.75, 0.75, 0.25),
                 (0.0, 1.0, 0.5, 1.0), (0.0, 0.5, 1.0, 1.0),
                 (0.0, 0.5, 0.5, 1.0),
                 (0.25, 0.75, 0.75, 0.75), (0.0, 0.5, 0.0, 1.0),
                 (0.25, 0.75, 0.25, 0.75), (0.0, 0.0, 1.0, 0.5),
                 (0.25, 0.25, 0.75, 0.25), (0.0, 0.0, 0.5, 1.0),
                 (0.25, 0.25, 0.75, 0.75), (0.25, 0.25, 0.25, 0.75)]

        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

    def test_4_1_5D_cube_init(self):
        """Test that the initial 5D cube has the correct coords"""
        HC = Complex(5, func)
        HC.n_cube()
        check = [(0, 0, 0, 0, 0), (1, 1, 1, 1, 1), (1, 0, 0, 0, 0),
                 (1, 1, 0, 0, 0),
                 (1, 1, 1, 0, 0), (1, 1, 1, 1, 0), (1, 1, 1, 0, 1),
                 (1, 1, 0, 1, 0),
                 (1, 1, 0, 1, 1), (1, 1, 0, 0, 1), (1, 0, 1, 0, 0),
                 (1, 0, 1, 1, 0),
                 (1, 0, 1, 1, 1), (1, 0, 1, 0, 1), (1, 0, 0, 1, 0),
                 (1, 0, 0, 1, 1),
                 (1, 0, 0, 0, 1), (0, 1, 0, 0, 0), (0, 1, 1, 0, 0),
                 (0, 1, 1, 1, 0),
                 (0, 1, 1, 1, 1), (0, 1, 1, 0, 1), (0, 1, 0, 1, 0),
                 (0, 1, 0, 1, 1),
                 (0, 1, 0, 0, 1), (0, 0, 1, 0, 0), (0, 0, 1, 1, 0),
                 (0, 0, 1, 1, 1),
                 (0, 0, 1, 0, 1), (0, 0, 0, 1, 0), (0, 0, 0, 1, 1),
                 (0, 0, 0, 0, 1),
                 (0.5, 0.5, 0.5, 0.5, 0.5)]

        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

    def test_4_2_5D_cube_splits(self):
        """Test that the 5D cube subtriangulations has the correct coords"""
        HC = Complex(5, func)
        HC.n_cube()
        HC.split_generation()
        check = [(0, 0, 0, 0, 0), (1, 1, 1, 1, 1), (1, 0, 0, 0, 0),
                 (1, 1, 0, 0, 0), (1, 1, 1, 0, 0), (1, 1, 1, 1, 0),
                 (1, 1, 1, 0, 1), (1, 1, 0, 1, 0), (1, 1, 0, 1, 1),
                 (1, 1, 0, 0, 1), (1, 0, 1, 0, 0), (1, 0, 1, 1, 0),
                 (1, 0, 1, 1, 1), (1, 0, 1, 0, 1), (1, 0, 0, 1, 0),
                 (1, 0, 0, 1, 1), (1, 0, 0, 0, 1), (0, 1, 0, 0, 0),
                 (0, 1, 1, 0, 0), (0, 1, 1, 1, 0), (0, 1, 1, 1, 1),
                 (0, 1, 1, 0, 1), (0, 1, 0, 1, 0), (0, 1, 0, 1, 1),
                 (0, 1, 0, 0, 1), (0, 0, 1, 0, 0), (0, 0, 1, 1, 0),
                 (0, 0, 1, 1, 1), (0, 0, 1, 0, 1), (0, 0, 0, 1, 0),
                 (0, 0, 0, 1, 1), (0, 0, 0, 0, 1), (0.5, 0.5, 0.5, 0.5, 0.5),
                 (0.0, 0.5, 0.5, 0.5, 0.5), (0.0, 0.0, 0.5, 0.5, 0.5),
                 (0.0, 0.0, 0.0, 0.5, 0.5), (0.0, 0.0, 0.0, 0.0, 0.5),
                 (0.0, 0.0, 0.0, 0.5, 0.0), (0.0, 0.0, 0.5, 0.0, 0.5),
                 (0.0, 0.0, 0.5, 0.0, 0.0), (0.0, 0.0, 0.5, 0.5, 0.0),
                 (0.0, 0.5, 0.0, 0.5, 0.5), (0.0, 0.5, 0.0, 0.0, 0.5),
                 (0.0, 0.5, 0.0, 0.0, 0.0), (0.0, 0.5, 0.0, 0.5, 0.0),
                 (0.0, 0.5, 0.5, 0.0, 0.5), (0.0, 0.5, 0.5, 0.0, 0.0),
                 (0.0, 0.5, 0.5, 0.5, 0.0), (0.5, 0.0, 0.5, 0.5, 0.5),
                 (0.5, 0.0, 0.0, 0.5, 0.5), (0.5, 0.0, 0.0, 0.0, 0.5),
                 (0.5, 0.0, 0.0, 0.0, 0.0), (0.5, 0.0, 0.0, 0.5, 0.0),
                 (0.5, 0.0, 0.5, 0.0, 0.5), (0.5, 0.0, 0.5, 0.0, 0.0),
                 (0.5, 0.0, 0.5, 0.5, 0.0), (0.5, 0.5, 0.0, 0.5, 0.5),
                 (0.5, 0.5, 0.0, 0.0, 0.5), (0.5, 0.5, 0.0, 0.0, 0.0),
                 (0.5, 0.5, 0.0, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0, 0.5),
                 (0.5, 0.5, 0.5, 0.0, 0.0), (0.5, 0.5, 0.5, 0.5, 0.0),
                 (0.25, 0.25, 0.25, 0.25, 0.25), (1.0, 0.5, 0.5, 0.5, 0.5),
                 (1.0, 1.0, 0.5, 0.5, 0.5), (1.0, 1.0, 1.0, 0.5, 0.5),
                 (1.0, 1.0, 1.0, 1.0, 0.5), (1.0, 1.0, 1.0, 0.5, 1.0),
                 (1.0, 1.0, 0.5, 1.0, 0.5), (1.0, 1.0, 0.5, 1.0, 1.0),
                 (1.0, 1.0, 0.5, 0.5, 1.0), (1.0, 0.5, 1.0, 0.5, 0.5),
                 (1.0, 0.5, 1.0, 1.0, 0.5), (1.0, 0.5, 1.0, 1.0, 1.0),
                 (1.0, 0.5, 1.0, 0.5, 1.0), (1.0, 0.5, 0.5, 1.0, 0.5),
                 (1.0, 0.5, 0.5, 1.0, 1.0), (1.0, 0.5, 0.5, 0.5, 1.0),
                 (0.5, 1.0, 0.5, 0.5, 0.5), (0.5, 1.0, 1.0, 0.5, 0.5),
                 (0.5, 1.0, 1.0, 1.0, 0.5), (0.5, 1.0, 1.0, 1.0, 1.0),
                 (0.5, 1.0, 1.0, 0.5, 1.0), (0.5, 1.0, 0.5, 1.0, 0.5),
                 (0.5, 1.0, 0.5, 1.0, 1.0), (0.5, 1.0, 0.5, 0.5, 1.0),
                 (0.5, 0.5, 1.0, 0.5, 0.5), (0.5, 0.5, 1.0, 1.0, 0.5),
                 (0.5, 0.5, 1.0, 1.0, 1.0), (0.5, 0.5, 1.0, 0.5, 1.0),
                 (0.5, 0.5, 0.5, 1.0, 0.5), (0.5, 0.5, 0.5, 1.0, 1.0),
                 (0.5, 0.5, 0.5, 0.5, 1.0), (0.75, 0.75, 0.75, 0.75, 0.75),
                 (1.0, 0.0, 0.5, 0.5, 0.5), (1.0, 0.0, 0.0, 0.5, 0.5),
                 (1.0, 0.0, 0.0, 0.0, 0.5), (1.0, 0.0, 0.0, 0.5, 0.0),
                 (1.0, 0.0, 0.5, 0.0, 0.5), (1.0, 0.0, 0.5, 0.0, 0.0),
                 (1.0, 0.0, 0.5, 0.5, 0.0), (1.0, 0.5, 0.0, 0.5, 0.5),
                 (1.0, 0.5, 0.0, 0.0, 0.5), (1.0, 0.5, 0.0, 0.0, 0.0),
                 (1.0, 0.5, 0.0, 0.5, 0.0), (1.0, 0.5, 0.5, 0.0, 0.5),
                 (1.0, 0.5, 0.5, 0.0, 0.0), (1.0, 0.5, 0.5, 0.5, 0.0),
                 (0.75, 0.25, 0.25, 0.25, 0.25), (1.0, 1.0, 0.0, 0.5, 0.5),
                 (1.0, 1.0, 0.0, 0.0, 0.5), (1.0, 1.0, 0.0, 0.5, 0.0),
                 (1.0, 1.0, 0.5, 0.0, 0.5), (1.0, 1.0, 0.5, 0.0, 0.0),
                 (1.0, 1.0, 0.5, 0.5, 0.0), (0.5, 1.0, 0.0, 0.5, 0.5),
                 (0.5, 1.0, 0.0, 0.0, 0.5), (0.5, 1.0, 0.0, 0.0, 0.0),
                 (0.5, 1.0, 0.0, 0.5, 0.0), (0.5, 1.0, 0.5, 0.0, 0.5),
                 (0.5, 1.0, 0.5, 0.0, 0.0), (0.5, 1.0, 0.5, 0.5, 0.0),
                 (0.75, 0.75, 0.25, 0.25, 0.25), (1.0, 1.0, 1.0, 0.0, 0.5),
                 (1.0, 1.0, 1.0, 0.5, 0.0), (1.0, 0.5, 1.0, 0.0, 0.5),
                 (1.0, 0.5, 1.0, 0.0, 0.0), (1.0, 0.5, 1.0, 0.5, 0.0),
                 (0.5, 1.0, 1.0, 0.0, 0.5), (0.5, 1.0, 1.0, 0.0, 0.0),
                 (0.5, 1.0, 1.0, 0.5, 0.0), (0.5, 0.5, 1.0, 0.0, 0.5),
                 (0.5, 0.5, 1.0, 0.0, 0.0), (0.5, 0.5, 1.0, 0.5, 0.0),
                 (0.75, 0.75, 0.75, 0.25, 0.25), (1.0, 1.0, 0.5, 1.0, 0.0),
                 (1.0, 0.5, 1.0, 1.0, 0.0), (1.0, 0.5, 0.5, 1.0, 0.0),
                 (0.5, 1.0, 1.0, 1.0, 0.0), (0.5, 1.0, 0.5, 1.0, 0.0),
                 (0.5, 0.5, 1.0, 1.0, 0.0), (0.5, 0.5, 0.5, 1.0, 0.0),
                 (0.75, 0.75, 0.75, 0.75, 0.25), (1.0, 1.0, 0.5, 0.0, 1.0),
                 (1.0, 0.5, 1.0, 0.0, 1.0), (1.0, 0.5, 0.5, 0.0, 1.0),
                 (0.5, 1.0, 1.0, 0.0, 1.0), (0.5, 1.0, 0.5, 0.0, 1.0),
                 (0.5, 0.5, 1.0, 0.0, 1.0), (0.5, 0.5, 0.5, 0.0, 1.0),
                 (0.75, 0.75, 0.75, 0.25, 0.75), (1.0, 1.0, 0.0, 1.0, 0.5),
                 (1.0, 0.5, 0.0, 1.0, 0.5), (1.0, 0.5, 0.0, 1.0, 0.0),
                 (0.5, 1.0, 0.0, 1.0, 0.5), (0.5, 1.0, 0.0, 1.0, 0.0),
                 (0.5, 0.5, 0.0, 1.0, 0.5), (0.5, 0.5, 0.0, 1.0, 0.0),
                 (0.75, 0.75, 0.25, 0.75, 0.25), (1.0, 1.0, 0.0, 0.5, 1.0),
                 (1.0, 0.5, 0.0, 1.0, 1.0), (1.0, 0.5, 0.0, 0.5, 1.0),
                 (0.5, 1.0, 0.0, 1.0, 1.0), (0.5, 1.0, 0.0, 0.5, 1.0),
                 (0.5, 0.5, 0.0, 1.0, 1.0), (0.5, 0.5, 0.0, 0.5, 1.0),
                 (0.75, 0.75, 0.25, 0.75, 0.75), (1.0, 0.5, 0.0, 0.0, 1.0),
                 (0.5, 1.0, 0.0, 0.0, 1.0), (0.5, 0.5, 0.0, 0.0, 1.0),
                 (0.75, 0.75, 0.25, 0.25, 0.75), (1.0, 0.0, 1.0, 0.5, 0.5),
                 (1.0, 0.0, 1.0, 0.0, 0.5), (1.0, 0.0, 1.0, 0.5, 0.0),
                 (0.5, 0.0, 1.0, 0.5, 0.5), (0.5, 0.0, 1.0, 0.0, 0.5),
                 (0.5, 0.0, 1.0, 0.0, 0.0), (0.5, 0.0, 1.0, 0.5, 0.0),
                 (0.75, 0.25, 0.75, 0.25, 0.25), (1.0, 0.0, 1.0, 1.0, 0.5),
                 (1.0, 0.0, 0.5, 1.0, 0.5), (1.0, 0.0, 0.5, 1.0, 0.0),
                 (0.5, 0.0, 1.0, 1.0, 0.5), (0.5, 0.0, 1.0, 1.0, 0.0),
                 (0.5, 0.0, 0.5, 1.0, 0.5), (0.5, 0.0, 0.5, 1.0, 0.0),
                 (0.75, 0.25, 0.75, 0.75, 0.25), (1.0, 0.0, 1.0, 0.5, 1.0),
                 (1.0, 0.0, 0.5, 1.0, 1.0), (1.0, 0.0, 0.5, 0.5, 1.0),
                 (0.5, 0.0, 1.0, 1.0, 1.0), (0.5, 0.0, 1.0, 0.5, 1.0),
                 (0.5, 0.0, 0.5, 1.0, 1.0), (0.5, 0.0, 0.5, 0.5, 1.0),
                 (0.75, 0.25, 0.75, 0.75, 0.75), (1.0, 0.0, 0.5, 0.0, 1.0),
                 (0.5, 0.0, 1.0, 0.0, 1.0), (0.5, 0.0, 0.5, 0.0, 1.0),
                 (0.75, 0.25, 0.75, 0.25, 0.75), (1.0, 0.0, 0.0, 1.0, 0.5),
                 (0.5, 0.0, 0.0, 1.0, 0.5), (0.5, 0.0, 0.0, 1.0, 0.0),
                 (0.75, 0.25, 0.25, 0.75, 0.25), (1.0, 0.0, 0.0, 0.5, 1.0),
                 (0.5, 0.0, 0.0, 1.0, 1.0), (0.5, 0.0, 0.0, 0.5, 1.0),
                 (0.75, 0.25, 0.25, 0.75, 0.75), (0.5, 0.0, 0.0, 0.0, 1.0),
                 (0.75, 0.25, 0.25, 0.25, 0.75), (0.0, 1.0, 0.5, 0.5, 0.5),
                 (0.0, 1.0, 0.0, 0.5, 0.5), (0.0, 1.0, 0.0, 0.0, 0.5),
                 (0.0, 1.0, 0.0, 0.5, 0.0), (0.0, 1.0, 0.5, 0.0, 0.5),
                 (0.0, 1.0, 0.5, 0.0, 0.0), (0.0, 1.0, 0.5, 0.5, 0.0),
                 (0.25, 0.75, 0.25, 0.25, 0.25), (0.0, 1.0, 1.0, 0.5, 0.5),
                 (0.0, 1.0, 1.0, 0.0, 0.5), (0.0, 1.0, 1.0, 0.5, 0.0),
                 (0.0, 0.5, 1.0, 0.5, 0.5), (0.0, 0.5, 1.0, 0.0, 0.5),
                 (0.0, 0.5, 1.0, 0.0, 0.0), (0.0, 0.5, 1.0, 0.5, 0.0),
                 (0.25, 0.75, 0.75, 0.25, 0.25), (0.0, 1.0, 1.0, 1.0, 0.5),
                 (0.0, 1.0, 0.5, 1.0, 0.5), (0.0, 1.0, 0.5, 1.0, 0.0),
                 (0.0, 0.5, 1.0, 1.0, 0.5), (0.0, 0.5, 1.0, 1.0, 0.0),
                 (0.0, 0.5, 0.5, 1.0, 0.5), (0.0, 0.5, 0.5, 1.0, 0.0),
                 (0.25, 0.75, 0.75, 0.75, 0.25), (0.0, 1.0, 1.0, 0.5, 1.0),
                 (0.0, 1.0, 0.5, 1.0, 1.0), (0.0, 1.0, 0.5, 0.5, 1.0),
                 (0.0, 0.5, 1.0, 1.0, 1.0), (0.0, 0.5, 1.0, 0.5, 1.0),
                 (0.0, 0.5, 0.5, 1.0, 1.0), (0.0, 0.5, 0.5, 0.5, 1.0),
                 (0.25, 0.75, 0.75, 0.75, 0.75), (0.0, 1.0, 0.5, 0.0, 1.0),
                 (0.0, 0.5, 1.0, 0.0, 1.0), (0.0, 0.5, 0.5, 0.0, 1.0),
                 (0.25, 0.75, 0.75, 0.25, 0.75), (0.0, 1.0, 0.0, 1.0, 0.5),
                 (0.0, 0.5, 0.0, 1.0, 0.5), (0.0, 0.5, 0.0, 1.0, 0.0),
                 (0.25, 0.75, 0.25, 0.75, 0.25), (0.0, 1.0, 0.0, 0.5, 1.0),
                 (0.0, 0.5, 0.0, 1.0, 1.0), (0.0, 0.5, 0.0, 0.5, 1.0),
                 (0.25, 0.75, 0.25, 0.75, 0.75), (0.0, 0.5, 0.0, 0.0, 1.0),
                 (0.25, 0.75, 0.25, 0.25, 0.75), (0.0, 0.0, 1.0, 0.5, 0.5),
                 (0.0, 0.0, 1.0, 0.0, 0.5), (0.0, 0.0, 1.0, 0.5, 0.0),
                 (0.25, 0.25, 0.75, 0.25, 0.25), (0.0, 0.0, 1.0, 1.0, 0.5),
                 (0.0, 0.0, 0.5, 1.0, 0.5), (0.0, 0.0, 0.5, 1.0, 0.0),
                 (0.25, 0.25, 0.75, 0.75, 0.25), (0.0, 0.0, 1.0, 0.5, 1.0),
                 (0.0, 0.0, 0.5, 1.0, 1.0), (0.0, 0.0, 0.5, 0.5, 1.0),
                 (0.25, 0.25, 0.75, 0.75, 0.75), (0.0, 0.0, 0.5, 0.0, 1.0),
                 (0.25, 0.25, 0.75, 0.25, 0.75), (0.0, 0.0, 0.0, 1.0, 0.5),
                 (0.25, 0.25, 0.25, 0.75, 0.25), (0.0, 0.0, 0.0, 0.5, 1.0),
                 (0.25, 0.25, 0.25, 0.75, 0.75), (0.25, 0.25, 0.25, 0.25, 0.75)]

        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

class TestRec(object):
    def test_1_1_2D_cube_init(self):  # TODO: REMOVE FUNC AFTER SPLIT
        """Test that the initial 2D cube has the correct coords"""
        HC = Complex(2, func)
        HC.n_cube()
        check = [(0, 0), (1, 1), (1, 0), (0, 1), (0.5, 0.5)]
        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

    def test_1_2_2D_cube_splits(self):
        """Test that the 2D cube subtriangulations has the correct coords"""
        HC = Complex(2, func)
        HC.n_cube()
        HC.split_generation()
        HC.split_generation()
        check = [(0, 0), (1, 1), (1, 0), (0, 1), (0.5, 0.5), (0.0, 0.5),
                 (0.5, 0.0),
                 (0.25, 0.25), (1.0, 0.5), (0.5, 1.0), (0.75, 0.75),
                 (0.75, 0.25),
                 (0.25, 0.75), (0.5, 0.25), (0.25, 0.5), (0.375, 0.375),
                 (0.0, 0.25),
                 (0.25, 0.0), (0.125, 0.125), (0.125, 0.375), (0.375, 0.125),
                 (0.5, 0.75), (0.75, 0.5), (0.625, 0.625), (1.0, 0.75),
                 (0.75, 1.0),
                 (0.875, 0.875), (0.875, 0.625), (0.625, 0.875), (0.625, 0.375),
                 (1.0, 0.25), (0.75, 0.0), (0.875, 0.125), (0.875, 0.375),
                 (0.625, 0.125), (0.375, 0.625), (0.0, 0.75), (0.25, 1.0),
                 (0.125, 0.875), (0.125, 0.625), (0.375, 0.875)]

        for i, v in enumerate(HC.V.cache):
            numpy.testing.assert_equal(check[i], v)

    def test_2_1_3D_cube_init(self):
        """Test that the initial 3D cube has the correct coords"""
        HC = Complex(3, func)
        HC.n_cube()
        HC.split_generation()
        HC.split_generation()
        check = [(0, 0, 0), (1, 1, 1), (1, 0, 0), (1, 1, 0), (1, 0, 1),
                 (0, 1, 0), (0, 1, 1), (0, 0, 1), (0.5, 0.5, 0.5)]
        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

    def test_2_2_3D_cube_splits(self):
        """Test that the 3D cube subtriangulations has the correct coords"""
        HC = Complex(2, func)
        HC.n_cube()
        HC.split_generation()
        HC.split_generation()
        check = [(0, 0, 0), (1, 1, 1), (1, 0, 0), (1, 1, 0), (1, 0, 1),
                 (0, 1, 0),
                 (0, 1, 1), (0, 0, 1), (0.5, 0.5, 0.5), (0.0, 0.5, 0.5),
                 (0.0, 0.0, 0.5), (0.0, 0.5, 0.0), (0.5, 0.0, 0.5),
                 (0.5, 0.0, 0.0),
                 (0.5, 0.5, 0.0), (0.25, 0.25, 0.25), (1.0, 0.5, 0.5),
                 (1.0, 1.0, 0.5),
                 (1.0, 0.5, 1.0), (0.5, 1.0, 0.5), (0.5, 1.0, 1.0),
                 (0.5, 0.5, 1.0),
                 (0.75, 0.75, 0.75), (1.0, 0.0, 0.5), (1.0, 0.5, 0.0),
                 (0.75, 0.25, 0.25), (0.5, 1.0, 0.0), (0.75, 0.75, 0.25),
                 (0.5, 0.0, 1.0), (0.75, 0.25, 0.75), (0.0, 1.0, 0.5),
                 (0.25, 0.75, 0.25), (0.0, 0.5, 1.0), (0.25, 0.75, 0.75),
                 (0.25, 0.25, 0.75), (0.5, 0.25, 0.25), (0.5, 0.5, 0.25),
                 (0.5, 0.25, 0.5), (0.25, 0.5, 0.25), (0.25, 0.5, 0.5),
                 (0.25, 0.25, 0.5), (0.375, 0.375, 0.375), (0.0, 0.25, 0.25),
                 (0.0, 0.0, 0.25), (0.0, 0.25, 0.0), (0.25, 0.0, 0.25),
                 (0.25, 0.0, 0.0), (0.25, 0.25, 0.0), (0.125, 0.125, 0.125),
                 (0.0, 0.5, 0.25), (0.0, 0.25, 0.5), (0.125, 0.375, 0.375),
                 (0.25, 0.0, 0.5), (0.125, 0.125, 0.375), (0.25, 0.5, 0.0),
                 (0.125, 0.375, 0.125), (0.5, 0.0, 0.25), (0.375, 0.125, 0.375),
                 (0.5, 0.25, 0.0), (0.375, 0.125, 0.125), (0.375, 0.375, 0.125),
                 (0.5, 0.75, 0.75), (0.5, 0.5, 0.75), (0.5, 0.75, 0.5),
                 (0.75, 0.5, 0.75), (0.75, 0.5, 0.5), (0.75, 0.75, 0.5),
                 (0.625, 0.625, 0.625), (1.0, 0.75, 0.75), (1.0, 1.0, 0.75),
                 (1.0, 0.75, 1.0), (0.75, 1.0, 0.75), (0.75, 1.0, 1.0),
                 (0.75, 0.75, 1.0), (0.875, 0.875, 0.875), (1.0, 0.5, 0.75),
                 (1.0, 0.75, 0.5), (0.875, 0.625, 0.625), (0.75, 1.0, 0.5),
                 (0.875, 0.875, 0.625), (0.75, 0.5, 1.0), (0.875, 0.625, 0.875),
                 (0.5, 1.0, 0.75), (0.625, 0.875, 0.625), (0.5, 0.75, 1.0),
                 (0.625, 0.875, 0.875), (0.625, 0.625, 0.875),
                 (0.75, 0.5, 0.25),
                 (0.75, 0.25, 0.5), (0.625, 0.375, 0.375), (1.0, 0.25, 0.25),
                 (1.0, 0.0, 0.25), (1.0, 0.25, 0.0), (0.75, 0.0, 0.25),
                 (0.75, 0.0, 0.0), (0.75, 0.25, 0.0), (0.875, 0.125, 0.125),
                 (1.0, 0.5, 0.25), (1.0, 0.25, 0.5), (0.875, 0.375, 0.375),
                 (0.75, 0.0, 0.5), (0.875, 0.125, 0.375), (0.75, 0.5, 0.0),
                 (0.875, 0.375, 0.125), (0.625, 0.125, 0.375),
                 (0.625, 0.125, 0.125),
                 (0.625, 0.375, 0.125), (0.5, 0.75, 0.25),
                 (0.625, 0.625, 0.375),
                 (1.0, 0.75, 0.25), (1.0, 1.0, 0.25), (1.0, 0.75, 0.0),
                 (0.75, 1.0, 0.25), (0.75, 1.0, 0.0), (0.75, 0.75, 0.0),
                 (0.875, 0.875, 0.125), (0.875, 0.625, 0.375),
                 (0.875, 0.875, 0.375),
                 (0.875, 0.625, 0.125), (0.5, 1.0, 0.25), (0.625, 0.875, 0.375),
                 (0.5, 0.75, 0.0), (0.625, 0.875, 0.125), (0.625, 0.625, 0.125),
                 (0.5, 0.25, 0.75), (0.625, 0.375, 0.625), (1.0, 0.25, 0.75),
                 (1.0, 0.0, 0.75), (1.0, 0.25, 1.0), (0.75, 0.0, 0.75),
                 (0.75, 0.0, 1.0), (0.75, 0.25, 1.0), (0.875, 0.125, 0.875),
                 (0.875, 0.375, 0.625), (0.875, 0.125, 0.625),
                 (0.875, 0.375, 0.875),
                 (0.5, 0.0, 0.75), (0.625, 0.125, 0.625), (0.5, 0.25, 1.0),
                 (0.625, 0.125, 0.875), (0.625, 0.375, 0.875),
                 (0.25, 0.75, 0.5),
                 (0.375, 0.625, 0.375), (0.0, 0.75, 0.25), (0.0, 1.0, 0.25),
                 (0.0, 0.75, 0.0), (0.25, 1.0, 0.25), (0.25, 1.0, 0.0),
                 (0.25, 0.75, 0.0), (0.125, 0.875, 0.125), (0.0, 0.75, 0.5),
                 (0.125, 0.625, 0.375), (0.25, 1.0, 0.5), (0.125, 0.875, 0.375),
                 (0.125, 0.625, 0.125), (0.375, 0.875, 0.375),
                 (0.375, 0.875, 0.125),
                 (0.375, 0.625, 0.125), (0.25, 0.5, 0.75),
                 (0.375, 0.625, 0.625),
                 (0.0, 0.75, 0.75), (0.0, 1.0, 0.75), (0.0, 0.75, 1.0),
                 (0.25, 1.0, 0.75), (0.25, 1.0, 1.0), (0.25, 0.75, 1.0),
                 (0.125, 0.875, 0.875), (0.0, 0.5, 0.75), (0.125, 0.625, 0.625),
                 (0.125, 0.875, 0.625), (0.25, 0.5, 1.0), (0.125, 0.625, 0.875),
                 (0.375, 0.875, 0.625), (0.375, 0.875, 0.875),
                 (0.375, 0.625, 0.875),
                 (0.375, 0.375, 0.625), (0.0, 0.25, 0.75), (0.0, 0.0, 0.75),
                 (0.0, 0.25, 1.0), (0.25, 0.0, 0.75), (0.25, 0.0, 1.0),
                 (0.25, 0.25, 1.0), (0.125, 0.125, 0.875),
                 (0.125, 0.375, 0.625),
                 (0.125, 0.125, 0.625), (0.125, 0.375, 0.875),
                 (0.375, 0.125, 0.625),
                 (0.375, 0.125, 0.875), (0.375, 0.375, 0.875)]

    def test_3_1_4D_cube_init(self):
        """Test that the initial 4D cube has the correct coords"""
        HC = Complex(4, func)
        HC.n_cube()
        check = [(0, 0, 0, 0), (1, 1, 1, 1), (1, 0, 0, 0), (1, 1, 0, 0),
                 (1, 1, 1, 0), (1, 1, 0, 1), (1, 0, 1, 0), (1, 0, 1, 1),
                 (1, 0, 0, 1), (0, 1, 0, 0), (0, 1, 1, 0), (0, 1, 1, 1),
                 (0, 1, 0, 1), (0, 0, 1, 0), (0, 0, 1, 1), (0, 0, 0, 1),
                 (0.5, 0.5, 0.5, 0.5)]

        for i, v in enumerate(HC.C0()):
            pass
            numpy.testing.assert_equal(check[i], v.x)

    def test_3_2_4D_cube_splits(self):
        """Test that the 4D cube subtriangulations has the correct coords"""
        HC = Complex(4, func)
        HC.n_cube()
        HC.split_generation()
        check = [(0, 0, 0, 0), (1, 1, 1, 1), (1, 0, 0, 0), (1, 1, 0, 0),
                 (1, 1, 1, 0),
                 (1, 1, 0, 1), (1, 0, 1, 0), (1, 0, 1, 1), (1, 0, 0, 1),
                 (0, 1, 0, 0),
                 (0, 1, 1, 0), (0, 1, 1, 1), (0, 1, 0, 1), (0, 0, 1, 0),
                 (0, 0, 1, 1),
                 (0, 0, 0, 1), (0.5, 0.5, 0.5, 0.5), (0.0, 0.5, 0.5, 0.5),
                 (0.0, 0.0, 0.5, 0.5), (0.0, 0.0, 0.0, 0.5),
                 (0.0, 0.0, 0.5, 0.0),
                 (0.0, 0.5, 0.0, 0.5), (0.0, 0.5, 0.0, 0.0),
                 (0.0, 0.5, 0.5, 0.0),
                 (0.5, 0.0, 0.5, 0.5), (0.5, 0.0, 0.0, 0.5),
                 (0.5, 0.0, 0.0, 0.0),
                 (0.5, 0.0, 0.5, 0.0), (0.5, 0.5, 0.0, 0.5),
                 (0.5, 0.5, 0.0, 0.0),
                 (0.5, 0.5, 0.5, 0.0), (0.25, 0.25, 0.25, 0.25),
                 (1.0, 0.5, 0.5, 0.5),
                 (1.0, 1.0, 0.5, 0.5), (1.0, 1.0, 1.0, 0.5),
                 (1.0, 1.0, 0.5, 1.0),
                 (1.0, 0.5, 1.0, 0.5), (1.0, 0.5, 1.0, 1.0),
                 (1.0, 0.5, 0.5, 1.0),
                 (0.5, 1.0, 0.5, 0.5), (0.5, 1.0, 1.0, 0.5),
                 (0.5, 1.0, 1.0, 1.0),
                 (0.5, 1.0, 0.5, 1.0), (0.5, 0.5, 1.0, 0.5),
                 (0.5, 0.5, 1.0, 1.0),
                 (0.5, 0.5, 0.5, 1.0), (0.75, 0.75, 0.75, 0.75),
                 (1.0, 0.0, 0.5, 0.5),
                 (1.0, 0.0, 0.0, 0.5), (1.0, 0.0, 0.5, 0.0),
                 (1.0, 0.5, 0.0, 0.5),
                 (1.0, 0.5, 0.0, 0.0), (1.0, 0.5, 0.5, 0.0),
                 (0.75, 0.25, 0.25, 0.25),
                 (1.0, 1.0, 0.0, 0.5), (1.0, 1.0, 0.5, 0.0),
                 (0.5, 1.0, 0.0, 0.5),
                 (0.5, 1.0, 0.0, 0.0), (0.5, 1.0, 0.5, 0.0),
                 (0.75, 0.75, 0.25, 0.25),
                 (1.0, 0.5, 1.0, 0.0), (0.5, 1.0, 1.0, 0.0),
                 (0.5, 0.5, 1.0, 0.0),
                 (0.75, 0.75, 0.75, 0.25), (1.0, 0.5, 0.0, 1.0),
                 (0.5, 1.0, 0.0, 1.0),
                 (0.5, 0.5, 0.0, 1.0), (0.75, 0.75, 0.25, 0.75),
                 (1.0, 0.0, 1.0, 0.5),
                 (0.5, 0.0, 1.0, 0.5), (0.5, 0.0, 1.0, 0.0),
                 (0.75, 0.25, 0.75, 0.25),
                 (1.0, 0.0, 0.5, 1.0), (0.5, 0.0, 1.0, 1.0),
                 (0.5, 0.0, 0.5, 1.0),
                 (0.75, 0.25, 0.75, 0.75), (0.5, 0.0, 0.0, 1.0),
                 (0.75, 0.25, 0.25, 0.75), (0.0, 1.0, 0.5, 0.5),
                 (0.0, 1.0, 0.0, 0.5),
                 (0.0, 1.0, 0.5, 0.0), (0.25, 0.75, 0.25, 0.25),
                 (0.0, 1.0, 1.0, 0.5),
                 (0.0, 0.5, 1.0, 0.5), (0.0, 0.5, 1.0, 0.0),
                 (0.25, 0.75, 0.75, 0.25),
                 (0.0, 1.0, 0.5, 1.0), (0.0, 0.5, 1.0, 1.0),
                 (0.0, 0.5, 0.5, 1.0),
                 (0.25, 0.75, 0.75, 0.75), (0.0, 0.5, 0.0, 1.0),
                 (0.25, 0.75, 0.25, 0.75), (0.0, 0.0, 1.0, 0.5),
                 (0.25, 0.25, 0.75, 0.25), (0.0, 0.0, 0.5, 1.0),
                 (0.25, 0.25, 0.75, 0.75), (0.25, 0.25, 0.25, 0.75)]

        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

    def test_4_1_5D_cube_init(self):
        """Test that the initial 5D cube has the correct coords"""
        HC = Complex(5, func)
        HC.n_cube()
        check = [(0, 0, 0, 0, 0), (1, 1, 1, 1, 1), (1, 0, 0, 0, 0),
                 (1, 1, 0, 0, 0),
                 (1, 1, 1, 0, 0), (1, 1, 1, 1, 0), (1, 1, 1, 0, 1),
                 (1, 1, 0, 1, 0),
                 (1, 1, 0, 1, 1), (1, 1, 0, 0, 1), (1, 0, 1, 0, 0),
                 (1, 0, 1, 1, 0),
                 (1, 0, 1, 1, 1), (1, 0, 1, 0, 1), (1, 0, 0, 1, 0),
                 (1, 0, 0, 1, 1),
                 (1, 0, 0, 0, 1), (0, 1, 0, 0, 0), (0, 1, 1, 0, 0),
                 (0, 1, 1, 1, 0),
                 (0, 1, 1, 1, 1), (0, 1, 1, 0, 1), (0, 1, 0, 1, 0),
                 (0, 1, 0, 1, 1),
                 (0, 1, 0, 0, 1), (0, 0, 1, 0, 0), (0, 0, 1, 1, 0),
                 (0, 0, 1, 1, 1),
                 (0, 0, 1, 0, 1), (0, 0, 0, 1, 0), (0, 0, 0, 1, 1),
                 (0, 0, 0, 0, 1),
                 (0.5, 0.5, 0.5, 0.5, 0.5)]

        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

    def test_4_2_5D_cube_splits(self):
        """Test that the 5D cube subtriangulations has the correct coords"""
        HC = Complex(5, func)
        HC.n_cube()
        HC.split_generation()
        check = [(0, 0, 0, 0, 0), (1, 1, 1, 1, 1), (1, 0, 0, 0, 0),
                 (1, 1, 0, 0, 0), (1, 1, 1, 0, 0), (1, 1, 1, 1, 0),
                 (1, 1, 1, 0, 1), (1, 1, 0, 1, 0), (1, 1, 0, 1, 1),
                 (1, 1, 0, 0, 1), (1, 0, 1, 0, 0), (1, 0, 1, 1, 0),
                 (1, 0, 1, 1, 1), (1, 0, 1, 0, 1), (1, 0, 0, 1, 0),
                 (1, 0, 0, 1, 1), (1, 0, 0, 0, 1), (0, 1, 0, 0, 0),
                 (0, 1, 1, 0, 0), (0, 1, 1, 1, 0), (0, 1, 1, 1, 1),
                 (0, 1, 1, 0, 1), (0, 1, 0, 1, 0), (0, 1, 0, 1, 1),
                 (0, 1, 0, 0, 1), (0, 0, 1, 0, 0), (0, 0, 1, 1, 0),
                 (0, 0, 1, 1, 1), (0, 0, 1, 0, 1), (0, 0, 0, 1, 0),
                 (0, 0, 0, 1, 1), (0, 0, 0, 0, 1), (0.5, 0.5, 0.5, 0.5, 0.5),
                 (0.0, 0.5, 0.5, 0.5, 0.5), (0.0, 0.0, 0.5, 0.5, 0.5),
                 (0.0, 0.0, 0.0, 0.5, 0.5), (0.0, 0.0, 0.0, 0.0, 0.5),
                 (0.0, 0.0, 0.0, 0.5, 0.0), (0.0, 0.0, 0.5, 0.0, 0.5),
                 (0.0, 0.0, 0.5, 0.0, 0.0), (0.0, 0.0, 0.5, 0.5, 0.0),
                 (0.0, 0.5, 0.0, 0.5, 0.5), (0.0, 0.5, 0.0, 0.0, 0.5),
                 (0.0, 0.5, 0.0, 0.0, 0.0), (0.0, 0.5, 0.0, 0.5, 0.0),
                 (0.0, 0.5, 0.5, 0.0, 0.5), (0.0, 0.5, 0.5, 0.0, 0.0),
                 (0.0, 0.5, 0.5, 0.5, 0.0), (0.5, 0.0, 0.5, 0.5, 0.5),
                 (0.5, 0.0, 0.0, 0.5, 0.5), (0.5, 0.0, 0.0, 0.0, 0.5),
                 (0.5, 0.0, 0.0, 0.0, 0.0), (0.5, 0.0, 0.0, 0.5, 0.0),
                 (0.5, 0.0, 0.5, 0.0, 0.5), (0.5, 0.0, 0.5, 0.0, 0.0),
                 (0.5, 0.0, 0.5, 0.5, 0.0), (0.5, 0.5, 0.0, 0.5, 0.5),
                 (0.5, 0.5, 0.0, 0.0, 0.5), (0.5, 0.5, 0.0, 0.0, 0.0),
                 (0.5, 0.5, 0.0, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0, 0.5),
                 (0.5, 0.5, 0.5, 0.0, 0.0), (0.5, 0.5, 0.5, 0.5, 0.0),
                 (0.25, 0.25, 0.25, 0.25, 0.25), (1.0, 0.5, 0.5, 0.5, 0.5),
                 (1.0, 1.0, 0.5, 0.5, 0.5), (1.0, 1.0, 1.0, 0.5, 0.5),
                 (1.0, 1.0, 1.0, 1.0, 0.5), (1.0, 1.0, 1.0, 0.5, 1.0),
                 (1.0, 1.0, 0.5, 1.0, 0.5), (1.0, 1.0, 0.5, 1.0, 1.0),
                 (1.0, 1.0, 0.5, 0.5, 1.0), (1.0, 0.5, 1.0, 0.5, 0.5),
                 (1.0, 0.5, 1.0, 1.0, 0.5), (1.0, 0.5, 1.0, 1.0, 1.0),
                 (1.0, 0.5, 1.0, 0.5, 1.0), (1.0, 0.5, 0.5, 1.0, 0.5),
                 (1.0, 0.5, 0.5, 1.0, 1.0), (1.0, 0.5, 0.5, 0.5, 1.0),
                 (0.5, 1.0, 0.5, 0.5, 0.5), (0.5, 1.0, 1.0, 0.5, 0.5),
                 (0.5, 1.0, 1.0, 1.0, 0.5), (0.5, 1.0, 1.0, 1.0, 1.0),
                 (0.5, 1.0, 1.0, 0.5, 1.0), (0.5, 1.0, 0.5, 1.0, 0.5),
                 (0.5, 1.0, 0.5, 1.0, 1.0), (0.5, 1.0, 0.5, 0.5, 1.0),
                 (0.5, 0.5, 1.0, 0.5, 0.5), (0.5, 0.5, 1.0, 1.0, 0.5),
                 (0.5, 0.5, 1.0, 1.0, 1.0), (0.5, 0.5, 1.0, 0.5, 1.0),
                 (0.5, 0.5, 0.5, 1.0, 0.5), (0.5, 0.5, 0.5, 1.0, 1.0),
                 (0.5, 0.5, 0.5, 0.5, 1.0), (0.75, 0.75, 0.75, 0.75, 0.75),
                 (1.0, 0.0, 0.5, 0.5, 0.5), (1.0, 0.0, 0.0, 0.5, 0.5),
                 (1.0, 0.0, 0.0, 0.0, 0.5), (1.0, 0.0, 0.0, 0.5, 0.0),
                 (1.0, 0.0, 0.5, 0.0, 0.5), (1.0, 0.0, 0.5, 0.0, 0.0),
                 (1.0, 0.0, 0.5, 0.5, 0.0), (1.0, 0.5, 0.0, 0.5, 0.5),
                 (1.0, 0.5, 0.0, 0.0, 0.5), (1.0, 0.5, 0.0, 0.0, 0.0),
                 (1.0, 0.5, 0.0, 0.5, 0.0), (1.0, 0.5, 0.5, 0.0, 0.5),
                 (1.0, 0.5, 0.5, 0.0, 0.0), (1.0, 0.5, 0.5, 0.5, 0.0),
                 (0.75, 0.25, 0.25, 0.25, 0.25), (1.0, 1.0, 0.0, 0.5, 0.5),
                 (1.0, 1.0, 0.0, 0.0, 0.5), (1.0, 1.0, 0.0, 0.5, 0.0),
                 (1.0, 1.0, 0.5, 0.0, 0.5), (1.0, 1.0, 0.5, 0.0, 0.0),
                 (1.0, 1.0, 0.5, 0.5, 0.0), (0.5, 1.0, 0.0, 0.5, 0.5),
                 (0.5, 1.0, 0.0, 0.0, 0.5), (0.5, 1.0, 0.0, 0.0, 0.0),
                 (0.5, 1.0, 0.0, 0.5, 0.0), (0.5, 1.0, 0.5, 0.0, 0.5),
                 (0.5, 1.0, 0.5, 0.0, 0.0), (0.5, 1.0, 0.5, 0.5, 0.0),
                 (0.75, 0.75, 0.25, 0.25, 0.25), (1.0, 1.0, 1.0, 0.0, 0.5),
                 (1.0, 1.0, 1.0, 0.5, 0.0), (1.0, 0.5, 1.0, 0.0, 0.5),
                 (1.0, 0.5, 1.0, 0.0, 0.0), (1.0, 0.5, 1.0, 0.5, 0.0),
                 (0.5, 1.0, 1.0, 0.0, 0.5), (0.5, 1.0, 1.0, 0.0, 0.0),
                 (0.5, 1.0, 1.0, 0.5, 0.0), (0.5, 0.5, 1.0, 0.0, 0.5),
                 (0.5, 0.5, 1.0, 0.0, 0.0), (0.5, 0.5, 1.0, 0.5, 0.0),
                 (0.75, 0.75, 0.75, 0.25, 0.25), (1.0, 1.0, 0.5, 1.0, 0.0),
                 (1.0, 0.5, 1.0, 1.0, 0.0), (1.0, 0.5, 0.5, 1.0, 0.0),
                 (0.5, 1.0, 1.0, 1.0, 0.0), (0.5, 1.0, 0.5, 1.0, 0.0),
                 (0.5, 0.5, 1.0, 1.0, 0.0), (0.5, 0.5, 0.5, 1.0, 0.0),
                 (0.75, 0.75, 0.75, 0.75, 0.25), (1.0, 1.0, 0.5, 0.0, 1.0),
                 (1.0, 0.5, 1.0, 0.0, 1.0), (1.0, 0.5, 0.5, 0.0, 1.0),
                 (0.5, 1.0, 1.0, 0.0, 1.0), (0.5, 1.0, 0.5, 0.0, 1.0),
                 (0.5, 0.5, 1.0, 0.0, 1.0), (0.5, 0.5, 0.5, 0.0, 1.0),
                 (0.75, 0.75, 0.75, 0.25, 0.75), (1.0, 1.0, 0.0, 1.0, 0.5),
                 (1.0, 0.5, 0.0, 1.0, 0.5), (1.0, 0.5, 0.0, 1.0, 0.0),
                 (0.5, 1.0, 0.0, 1.0, 0.5), (0.5, 1.0, 0.0, 1.0, 0.0),
                 (0.5, 0.5, 0.0, 1.0, 0.5), (0.5, 0.5, 0.0, 1.0, 0.0),
                 (0.75, 0.75, 0.25, 0.75, 0.25), (1.0, 1.0, 0.0, 0.5, 1.0),
                 (1.0, 0.5, 0.0, 1.0, 1.0), (1.0, 0.5, 0.0, 0.5, 1.0),
                 (0.5, 1.0, 0.0, 1.0, 1.0), (0.5, 1.0, 0.0, 0.5, 1.0),
                 (0.5, 0.5, 0.0, 1.0, 1.0), (0.5, 0.5, 0.0, 0.5, 1.0),
                 (0.75, 0.75, 0.25, 0.75, 0.75), (1.0, 0.5, 0.0, 0.0, 1.0),
                 (0.5, 1.0, 0.0, 0.0, 1.0), (0.5, 0.5, 0.0, 0.0, 1.0),
                 (0.75, 0.75, 0.25, 0.25, 0.75), (1.0, 0.0, 1.0, 0.5, 0.5),
                 (1.0, 0.0, 1.0, 0.0, 0.5), (1.0, 0.0, 1.0, 0.5, 0.0),
                 (0.5, 0.0, 1.0, 0.5, 0.5), (0.5, 0.0, 1.0, 0.0, 0.5),
                 (0.5, 0.0, 1.0, 0.0, 0.0), (0.5, 0.0, 1.0, 0.5, 0.0),
                 (0.75, 0.25, 0.75, 0.25, 0.25), (1.0, 0.0, 1.0, 1.0, 0.5),
                 (1.0, 0.0, 0.5, 1.0, 0.5), (1.0, 0.0, 0.5, 1.0, 0.0),
                 (0.5, 0.0, 1.0, 1.0, 0.5), (0.5, 0.0, 1.0, 1.0, 0.0),
                 (0.5, 0.0, 0.5, 1.0, 0.5), (0.5, 0.0, 0.5, 1.0, 0.0),
                 (0.75, 0.25, 0.75, 0.75, 0.25), (1.0, 0.0, 1.0, 0.5, 1.0),
                 (1.0, 0.0, 0.5, 1.0, 1.0), (1.0, 0.0, 0.5, 0.5, 1.0),
                 (0.5, 0.0, 1.0, 1.0, 1.0), (0.5, 0.0, 1.0, 0.5, 1.0),
                 (0.5, 0.0, 0.5, 1.0, 1.0), (0.5, 0.0, 0.5, 0.5, 1.0),
                 (0.75, 0.25, 0.75, 0.75, 0.75), (1.0, 0.0, 0.5, 0.0, 1.0),
                 (0.5, 0.0, 1.0, 0.0, 1.0), (0.5, 0.0, 0.5, 0.0, 1.0),
                 (0.75, 0.25, 0.75, 0.25, 0.75), (1.0, 0.0, 0.0, 1.0, 0.5),
                 (0.5, 0.0, 0.0, 1.0, 0.5), (0.5, 0.0, 0.0, 1.0, 0.0),
                 (0.75, 0.25, 0.25, 0.75, 0.25), (1.0, 0.0, 0.0, 0.5, 1.0),
                 (0.5, 0.0, 0.0, 1.0, 1.0), (0.5, 0.0, 0.0, 0.5, 1.0),
                 (0.75, 0.25, 0.25, 0.75, 0.75), (0.5, 0.0, 0.0, 0.0, 1.0),
                 (0.75, 0.25, 0.25, 0.25, 0.75), (0.0, 1.0, 0.5, 0.5, 0.5),
                 (0.0, 1.0, 0.0, 0.5, 0.5), (0.0, 1.0, 0.0, 0.0, 0.5),
                 (0.0, 1.0, 0.0, 0.5, 0.0), (0.0, 1.0, 0.5, 0.0, 0.5),
                 (0.0, 1.0, 0.5, 0.0, 0.0), (0.0, 1.0, 0.5, 0.5, 0.0),
                 (0.25, 0.75, 0.25, 0.25, 0.25), (0.0, 1.0, 1.0, 0.5, 0.5),
                 (0.0, 1.0, 1.0, 0.0, 0.5), (0.0, 1.0, 1.0, 0.5, 0.0),
                 (0.0, 0.5, 1.0, 0.5, 0.5), (0.0, 0.5, 1.0, 0.0, 0.5),
                 (0.0, 0.5, 1.0, 0.0, 0.0), (0.0, 0.5, 1.0, 0.5, 0.0),
                 (0.25, 0.75, 0.75, 0.25, 0.25), (0.0, 1.0, 1.0, 1.0, 0.5),
                 (0.0, 1.0, 0.5, 1.0, 0.5), (0.0, 1.0, 0.5, 1.0, 0.0),
                 (0.0, 0.5, 1.0, 1.0, 0.5), (0.0, 0.5, 1.0, 1.0, 0.0),
                 (0.0, 0.5, 0.5, 1.0, 0.5), (0.0, 0.5, 0.5, 1.0, 0.0),
                 (0.25, 0.75, 0.75, 0.75, 0.25), (0.0, 1.0, 1.0, 0.5, 1.0),
                 (0.0, 1.0, 0.5, 1.0, 1.0), (0.0, 1.0, 0.5, 0.5, 1.0),
                 (0.0, 0.5, 1.0, 1.0, 1.0), (0.0, 0.5, 1.0, 0.5, 1.0),
                 (0.0, 0.5, 0.5, 1.0, 1.0), (0.0, 0.5, 0.5, 0.5, 1.0),
                 (0.25, 0.75, 0.75, 0.75, 0.75), (0.0, 1.0, 0.5, 0.0, 1.0),
                 (0.0, 0.5, 1.0, 0.0, 1.0), (0.0, 0.5, 0.5, 0.0, 1.0),
                 (0.25, 0.75, 0.75, 0.25, 0.75), (0.0, 1.0, 0.0, 1.0, 0.5),
                 (0.0, 0.5, 0.0, 1.0, 0.5), (0.0, 0.5, 0.0, 1.0, 0.0),
                 (0.25, 0.75, 0.25, 0.75, 0.25), (0.0, 1.0, 0.0, 0.5, 1.0),
                 (0.0, 0.5, 0.0, 1.0, 1.0), (0.0, 0.5, 0.0, 0.5, 1.0),
                 (0.25, 0.75, 0.25, 0.75, 0.75), (0.0, 0.5, 0.0, 0.0, 1.0),
                 (0.25, 0.75, 0.25, 0.25, 0.75), (0.0, 0.0, 1.0, 0.5, 0.5),
                 (0.0, 0.0, 1.0, 0.0, 0.5), (0.0, 0.0, 1.0, 0.5, 0.0),
                 (0.25, 0.25, 0.75, 0.25, 0.25), (0.0, 0.0, 1.0, 1.0, 0.5),
                 (0.0, 0.0, 0.5, 1.0, 0.5), (0.0, 0.0, 0.5, 1.0, 0.0),
                 (0.25, 0.25, 0.75, 0.75, 0.25), (0.0, 0.0, 1.0, 0.5, 1.0),
                 (0.0, 0.0, 0.5, 1.0, 1.0), (0.0, 0.0, 0.5, 0.5, 1.0),
                 (0.25, 0.25, 0.75, 0.75, 0.75), (0.0, 0.0, 0.5, 0.0, 1.0),
                 (0.25, 0.25, 0.75, 0.25, 0.75), (0.0, 0.0, 0.0, 1.0, 0.5),
                 (0.25, 0.25, 0.25, 0.75, 0.25), (0.0, 0.0, 0.0, 0.5, 1.0),
                 (0.25, 0.25, 0.25, 0.75, 0.75), (0.25, 0.25, 0.25, 0.25, 0.75)]

        for i, v in enumerate(HC.C0()):
            numpy.testing.assert_equal(check[i], v.x)

class TestField(object):
    pass